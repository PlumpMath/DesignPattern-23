*定义：
提供一种方法访问一个容器（集合只是其中一种）对象中各个元素，而又不需暴露该对象的内部细节。


*角色：
1) 抽象迭代器（Iterator）：定义访问和遍历元素的接口。
2) 具体迭代器（Concrete Iterator）：实现迭代器接口，并要记录遍历中的当前位置。
3) 抽象容器（Container）：提供创建具体迭代器角色的接口。
4) 具体容器（Concrete Container）：实现创建具体迭代器角色的接口——这个具体迭代器角色于该容器的结构相关。


*
迭代器模式的关键在于：对实现对容器数据遍历的迭代器


*
1.迭代器模式是为容器而生
2.对容器对象的访问必然涉及到遍历算法
3.在迭代器模式中，具体迭代器角色和具体容器角色是耦合在一起的——遍历算法是与容器的内部细节紧密相关的。
      为了使客户程序从与具体迭代器角色耦合的困境中脱离出来，避免具体迭代器角色的更换给客户程序带来的修改，迭代器模式抽象了具体迭代器角色，使得客户程序更具一般性和重用性。这被称为多态迭代
4.迭代多态：为遍历不同的集合结构提供一个统一的接口，从而支持同样的算法在不同的集合结构上进行操作。



