*
创建XMLHTTPRequest对象
xmlhttp_request = new ActiveXObject( "Microsoft.XMLHTTP" );
xmlhttp_request = new XMLHttpRequest(); 

*
XMLHTTPRequest
属性：
	readyState：0初始化XMLHttpRequest对象，1已调用open()，2已调用send()，3开始接收响应体，4响应接收完成
	responseText：响应体（默认编码UTF-8）
	responseXML：响应解析为xml并作为Document对象返回
	status：http响应状态码，readyState小于3读取此属性异常
	statusText：http响应状态码对应的字符串，如200对应"OK"，readyState小于3读取此属性异常
	onreadystatechange：readyState状态改变，当readyState为3时它也可能调用多次。
方法：
	abort()：取消当前响应（关闭连接）
	getAllResponseHeaders()：返回响应整个头
	getAllResponseHeader()：返回指定头的值
	open()：初始化请求参数
	setRequestHeader()：向一个打开但未发送的请求设置或添加一个HTTP请求。
	send()：发送请求。send中可以加入参数，即需要发送的消息
	
	
*
open(method, url, async, username, password)
method 参数是用于请求的 HTTP 方法。值包括 GET、POST 和 HEAD。
url 参数是请求的主体。大多数浏览器实施了一个同源安全策略，并且要求这个 URL 与包含脚本的文本具有相同的主机名和端口。
async 参数指示请求使用应该异步地执行。如果这个参数是 false，请求是同步的，后续对 send() 的调用将阻塞，直到响应完全接收。如果这个参数是 true 或省略，请求是异步的，且通常需要一个 onreadystatechange 事件句柄。
username 和 password 参数是可选的，为 url 所需的授权提供认证资格。如果指定了，它们会覆盖 url 自己指定的任何资格。


*
send()
send(body)如果通过调用 open() 指定的 HTTP 方法是 POST 或 PUT，body 参数指定了请求体，作为一个字符串或者 Document 对象。
如果通过调用 open() 指定的 HTTP 方法是 GET或者其他任何方法，这个参数是不可用的，应该为 null（有些实现不允许省略该参数）。
（其实也就是说，当为get时，设置这个body也没有用，会被忽略掉――实验结果是：请求不到任何信息）


*
长连接：
http://fengzl.javaeye.com/blog/129664


*
模仿表单提交，需要请求头字段
Content-Type: application/x-www-form-urlencoded